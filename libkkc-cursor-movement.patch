From 7c9920ce06230c4d5d1ef55abf5a163c09c3afae Mon Sep 17 00:00:00 2001
From: Daiki Ueno <ueno@gnu.org>
Date: Mon, 7 Mar 2016 16:01:52 +0900
Subject: [PATCH 1/2] candidate-list: Factor out cursor-pos notification

---
 libkkc/candidate-list.vala | 29 +++++++++++++++--------------
 1 file changed, 15 insertions(+), 14 deletions(-)

Index: libkkc-0.3.1/libkkc/candidate-list.vala
===================================================================
--- libkkc-0.3.1.orig/libkkc/candidate-list.vala
+++ libkkc-0.3.1/libkkc/candidate-list.vala
@@ -122,7 +122,8 @@ namespace Kkc {
         }
 
         uint get_page_start_cursor_pos (uint pos) {
-            return (pos / page_size) * page_size;
+            var page_index = (pos - page_start) / page_size;
+            return page_index * page_size + page_start;
         }
 
         /**
@@ -210,23 +211,33 @@ namespace Kkc {
             }
         }
 
+        bool update_cursor_pos (uint pos) {
+            if (0 <= pos && pos < _candidates.size && pos != _cursor_pos) {
+                _cursor_pos = (int) pos;
+                notify_property ("cursor-pos");
+                return true;
+            }
+            return false;
+        }
+
         bool cursor_move (int step) {
             if (_candidates.is_empty || step == 0)
                 return false;
 
+            int start = _cursor_pos - (int) page_start;
+            int total = (int) _candidates.size - (int) page_start;
+
             if (round) {
-                var pos = (_cursor_pos + step) % _candidates.size;
+                int pos = (start + step) % total;
                 if (pos < 0)
-                    pos += _candidates.size;
-                _cursor_pos = pos;
-                notify_property ("cursor-pos");
-                return true;
-            } else {
-                var pos = _cursor_pos + step;
-                if (0 <= pos && pos < _candidates.size) {
-                    _cursor_pos = pos;
-                    notify_property ("cursor-pos");
+                    pos += total;
+                if (update_cursor_pos (pos + page_start))
                     return true;
+            } else {
+                var pos = start + step;
+                if (0 <= pos && pos < total) {
+                    if (update_cursor_pos (pos + page_start))
+                        return true;
                 }
             }
 
@@ -239,7 +250,11 @@ namespace Kkc {
          * @return `true` if cursor position has changed, `false` otherwise.
          */
         public bool cursor_up () {
-            return cursor_move (-1);
+            if (_cursor_pos >= page_start)
+                return cursor_move (-1);
+            else if (update_cursor_pos (_cursor_pos - 1))
+                return true;
+            return false;
         }
 
         /**
@@ -248,32 +263,35 @@ namespace Kkc {
          * @return `true` if cursor position has changed, `false` otherwise
          */
         public bool cursor_down () {
-            return cursor_move (1);
+            if (_cursor_pos >= page_start)
+                return cursor_move (1);
+            else if (update_cursor_pos (_cursor_pos + 1))
+                return true;
+            return false;
         }
 
         bool page_move (int step) {
             if (_candidates.is_empty || step == 0)
                 return false;
 
+            int start = _cursor_pos - (int) page_start;
+            int total = (int) _candidates.size - (int) page_start;
+
             if (round) {
-                var pos = (_cursor_pos + page_size * step) % _candidates.size;
+                int pos = (start + (int) page_size * step) % total;
                 if (pos < 0)
-                    pos += _candidates.size;
-                pos = get_page_start_cursor_pos (pos);
-                if (pos != _cursor_pos) {
-                    _cursor_pos = (int) pos;
-                    notify_property ("cursor-pos");
-                    return true;
+                    pos += total;
+                if (pos + (int) page_start < _candidates.size) {
+                    var new_pos = get_page_start_cursor_pos (pos + page_start);
+                    if (update_cursor_pos (new_pos))
+                        return true;
                 }
             } else {
-                var pos = _cursor_pos + page_size * step;
-                if (0 <= pos && pos < _candidates.size) {
-                    pos = get_page_start_cursor_pos (pos);
-                    if (pos != _cursor_pos) {
-                        _cursor_pos = (int) pos;
-                        notify_property ("cursor-pos");
+                var pos = start + (int) page_size * step;
+                if (0 <= pos && pos < total) {
+                    var new_pos = get_page_start_cursor_pos (pos + page_start);
+                    if (update_cursor_pos (new_pos))
                         return true;
-                    }
                 }
             }
             return false;
Index: libkkc-0.3.1/tests/candidate-list.vala
===================================================================
--- libkkc-0.3.1.orig/tests/candidate-list.vala
+++ libkkc-0.3.1/tests/candidate-list.vala
@@ -35,9 +35,9 @@ class CandidateListTests : Kkc.TestCase
         candidates.page_start = 2;
         candidates.page_size = 3;
 
+        candidates.add (new Kkc.Candidate ("a", false, "0"));
         candidates.add (new Kkc.Candidate ("a", false, "1"));
         candidates.add (new Kkc.Candidate ("a", false, "2"));
-        candidates.add (new Kkc.Candidate ("a", false, "3"));
 
         assert (!candidates.page_visible);
         candidates.cursor_down ();
@@ -45,21 +45,25 @@ class CandidateListTests : Kkc.TestCase
         candidates.cursor_down ();
         assert (candidates.page_visible);
 
+        candidates.add (new Kkc.Candidate ("a", false, "3"));
         candidates.add (new Kkc.Candidate ("a", false, "4"));
-        candidates.add (new Kkc.Candidate ("a", false, "5"));
 
         candidates.round = false;
         assert (!candidates.page_down ());
         assert (!candidates.page_up ());
 
+        candidates.add (new Kkc.Candidate ("a", false, "5"));
+        candidates.add (new Kkc.Candidate ("a", false, "6"));
+        candidates.add (new Kkc.Candidate ("a", false, "7"));
+
         candidates.round = true;
         assert (candidates.page_down ());
-        assert (candidates.cursor_pos == 0);
+        assert (candidates.cursor_pos == 5);
         assert (candidates.page_up ());
-        assert (candidates.cursor_pos == 3);
+        assert (candidates.cursor_pos == 2);
 
         assert (candidates.select_at (1));
-        assert (candidates.cursor_pos == 4);
+        assert (candidates.cursor_pos == 3);
 
         candidates.first ();
         assert (candidates.next ());
@@ -68,8 +72,9 @@ class CandidateListTests : Kkc.TestCase
         assert (candidates.cursor_pos == 0);
         assert (candidates.next ());
         assert (candidates.next ());
+        assert (candidates.cursor_pos == 2);
         assert (candidates.next ());
-        assert (candidates.cursor_pos == 0);
+        assert (candidates.cursor_pos == 5);
     }
 }
 
